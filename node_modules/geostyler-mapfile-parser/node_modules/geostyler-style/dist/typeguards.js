"use strict";
/**
 * Contains typeguards for geostyler-style
 * https://basarat.gitbook.io/typescript/type-system/typeguard#user-defined-type-guards
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGrayChannel = exports.isRgbChannel = exports.isRule = exports.isRasterSymbolizer = exports.isFillSymbolizer = exports.isLineSymbolizer = exports.isMarkSymbolizer = exports.isTextSymbolizer = exports.isIconSymbolizer = exports.isPointSymbolizer = exports.isSymbolizer = exports.isFunctionFilter = exports.isNegationFilter = exports.isCombinationFilter = exports.isComparisonFilter = exports.isFilter = exports.isStrMatchesFunctionOperator = exports.isNegationOperator = exports.isCombinationOperator = exports.isComparisonOperator = exports.isOperator = exports.isScaleDenominator = exports.isPropertyValue = void 0;
var isString_1 = __importDefault(require("lodash/isString"));
var isNumber_1 = __importDefault(require("lodash/isNumber"));
var isBoolean_1 = __importDefault(require("lodash/isBoolean"));
var isRegExp_1 = __importDefault(require("lodash/isRegExp"));
// PropertyValue
var isPropertyValue = function (got) {
    return (0, isString_1.default)(got) || (0, isNumber_1.default)(got) || (0, isBoolean_1.default)(got) || got === null;
};
exports.isPropertyValue = isPropertyValue;
// ScaleDenominator
var isScaleDenominator = function (got) {
    return ((got === null || got === void 0 ? void 0 : got.min) || (got === null || got === void 0 ? void 0 : got.max)) &&
        (got.min ? (0, exports.isFilter)(got.min) : true) &&
        (got.max ? (0, exports.isFilter)(got.max) : true);
};
exports.isScaleDenominator = isScaleDenominator;
// Operators
var isOperator = function (got) {
    return (0, exports.isComparisonOperator)(got) ||
        (0, exports.isCombinationOperator)(got) ||
        (0, exports.isStrMatchesFunctionOperator)(got) ||
        (0, exports.isNegationOperator)(got);
};
exports.isOperator = isOperator;
var isComparisonOperator = function (got) {
    return ['==', '*=', '!=', '<', '<=', '>', '>=', '<=x<='].includes(got);
};
exports.isComparisonOperator = isComparisonOperator;
var isCombinationOperator = function (got) {
    return ['&&', '||'].includes(got);
};
exports.isCombinationOperator = isCombinationOperator;
var isNegationOperator = function (got) {
    return got === '!';
};
exports.isNegationOperator = isNegationOperator;
var isStrMatchesFunctionOperator = function (got) {
    return got === 'FN_strMatches';
};
exports.isStrMatchesFunctionOperator = isStrMatchesFunctionOperator;
// Filters
var isFilter = function (got) {
    return (0, exports.isComparisonFilter)(got) ||
        (0, exports.isCombinationFilter)(got) ||
        (0, exports.isFunctionFilter)(got) ||
        (0, exports.isNegationFilter)(got);
};
exports.isFilter = isFilter;
var isComparisonFilter = function (got) {
    var expectedLength = got && got[0] === '<=x<=' ? 4 : 3;
    return Array.isArray(got) &&
        got.length === expectedLength &&
        (0, exports.isComparisonOperator)(got[0]) &&
        ((0, exports.isFunctionFilter)(got[1]) || (0, isString_1.default)(got[1])) &&
        (0, exports.isPropertyValue)(got[2]) &&
        (got[0] !== '<=x<=' || (0, isNumber_1.default)(got[3]));
};
exports.isComparisonFilter = isComparisonFilter;
var isCombinationFilter = function (got) {
    return Array.isArray(got) &&
        got.length >= 3 &&
        (0, exports.isCombinationOperator)(got[0]) &&
        got.every(function (arg, index) { return index === 0 || (0, exports.isFilter)(arg); });
};
exports.isCombinationFilter = isCombinationFilter;
var isNegationFilter = function (got) {
    return Array.isArray(got) &&
        got.length === 2 &&
        (0, exports.isNegationOperator)(got[0]) &&
        (0, exports.isFilter)(got[1]);
};
exports.isNegationFilter = isNegationFilter;
var isFunctionFilter = function (got) {
    return Array.isArray(got) &&
        got.length === 3 &&
        (0, exports.isStrMatchesFunctionOperator)(got[0]) &&
        (0, isString_1.default)(got[1]) &&
        (0, isRegExp_1.default)(got[2]);
};
exports.isFunctionFilter = isFunctionFilter;
// Symbolizers
var isSymbolizer = function (got) {
    return ['Fill', 'Icon', 'Line', 'Text', 'Mark', 'Raster'].includes(got === null || got === void 0 ? void 0 : got.kind);
};
exports.isSymbolizer = isSymbolizer;
var isPointSymbolizer = function (got) {
    return ['Icon', 'Text', 'Mark'].includes(got === null || got === void 0 ? void 0 : got.kind);
};
exports.isPointSymbolizer = isPointSymbolizer;
var isIconSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Icon';
};
exports.isIconSymbolizer = isIconSymbolizer;
var isTextSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Text';
};
exports.isTextSymbolizer = isTextSymbolizer;
var isMarkSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Mark' && (0, isString_1.default)(got === null || got === void 0 ? void 0 : got.wellKnownName);
};
exports.isMarkSymbolizer = isMarkSymbolizer;
var isLineSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Line';
};
exports.isLineSymbolizer = isLineSymbolizer;
var isFillSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Fill';
};
exports.isFillSymbolizer = isFillSymbolizer;
var isRasterSymbolizer = function (got) {
    return (got === null || got === void 0 ? void 0 : got.kind) === 'Raster';
};
exports.isRasterSymbolizer = isRasterSymbolizer;
// Rule
var isRule = function (got) {
    return (0, isString_1.default)(got === null || got === void 0 ? void 0 : got.name) &&
        ((got === null || got === void 0 ? void 0 : got.filter) ? (0, exports.isFilter)(got.filter) : true) &&
        ((got === null || got === void 0 ? void 0 : got.scaleDenominator) ? (0, exports.isScaleDenominator)(got.scaleDenominator) : true) &&
        (got === null || got === void 0 ? void 0 : got.symbolizers.every(function (arg) { return (0, exports.isSymbolizer)(arg); }));
};
exports.isRule = isRule;
/**
 * Checks if ChannelSelection is of type RGBChannel.
 */
var isRgbChannel = function (channels) {
    return (channels.redChannel !== undefined
        || channels.greenChannel !== undefined
        || channels.blueChannel !== undefined);
};
exports.isRgbChannel = isRgbChannel;
/**
 * Checks if ChannelSelection is of type GrayChannel.
 */
var isGrayChannel = function (channels) {
    return channels.grayChannel !== undefined;
};
exports.isGrayChannel = isGrayChannel;
//# sourceMappingURL=typeguards.js.map