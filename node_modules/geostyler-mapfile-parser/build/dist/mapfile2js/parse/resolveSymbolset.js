"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSymbolset = exports.resolveSymbolsFromMapfile = void 0;
var fs = __importStar(require("fs"));
var parseMapfile_1 = require("../parseMapfile");
var path_1 = require("path");
var Logger_1 = __importDefault(require("@terrestris/base-util/dist/Logger"));
var mapfileSymbols;
function substituteSymbols(obj) {
    var _loop_1 = function (property) {
        if (typeof obj[property] == 'object') {
            substituteSymbols(obj[property]);
        }
        else if (property === 'symbol') {
            if (obj[property] === '0') {
                // eslint-disable-next-line id-blacklist
                obj[property] = undefined;
            }
            else {
                // TODO: distinguish corectly between index and name reference
                var symbol = mapfileSymbols.find(function (element) { return element.name.replace('/\'|"/g', '') === obj[property].replace('/\'|"/g', ''); });
                if (symbol) {
                    obj[property] = symbol;
                }
                else {
                    obj[property] = mapfileSymbols[parseFloat(obj[property])];
                }
            }
        }
    };
    for (var property in obj) {
        _loop_1(property);
    }
}
/**
 * Parses the Mapfile data if it contains single SYMBOL tags and replaces the name with the filename within the
 * symbol tag
 *
 * @param {Mapfile} mapfile Parsed Mapfile Object
 */
function resolveSymbolsFromMapfile(mapfile) {
    var symbols = mapfile.map.symbols;
    if (mapfile.map.layers) {
        mapfile.map.layers.forEach(function (layer) {
            if (layer.classes) {
                layer.classes.forEach(function (mclass) {
                    if (mclass.styles) {
                        var styles = mclass.styles;
                        styles.forEach(function (style) {
                            if (style.symbol) {
                                symbols.forEach(function (symbol) {
                                    if (symbol.name && symbol.image && symbol.name === style.symbol) {
                                        style.symbol = (0, path_1.parse)(symbol.image)
                                            .base;
                                    }
                                });
                            }
                        });
                    }
                    else if (mclass.labels) {
                        // parse symbol data within a style tag of a label
                        mclass.labels.forEach(function (label) {
                            var styles = label.styles;
                            styles === null || styles === void 0 ? void 0 : styles.forEach(function (style) {
                                symbols === null || symbols === void 0 ? void 0 : symbols.forEach(function (symbol) {
                                    if (symbol.name &&
                                        symbol.image &&
                                        symbol.name === style.symbol) {
                                        style.symbol = (0, path_1.parse)(symbol.image)
                                            .base;
                                    }
                                });
                            });
                        });
                    }
                });
            }
        });
    }
    return mapfile;
}
exports.resolveSymbolsFromMapfile = resolveSymbolsFromMapfile;
/**
 * @param {Mapfile} mapfile Parsed Mapfile Object
 * @param {string} symbolsPath optional path of the symbols.sym file if no symbolset is defined in the Mapfile.
 */
function resolveSymbolset(mapfile, symbolsPath) {
    var symbolsetPath = mapfile.map.symbolset;
    var symbolsetFrom = 'MapFile SYMBOLSET tag';
    // if no SYMBOLSET is specified, but the Mapfile contains single SYMBOL tags
    if (!symbolsetPath && mapfile.map.symbols) {
        return resolveSymbolsFromMapfile(mapfile);
    }
    if (!symbolsetPath) {
        // Fallback to load the symbols file. Search "mapfile-symbols-path=" in the process args
        // (command line options).
        var processArgs = process.argv.slice(2);
        var cliSymbolsetPath = processArgs.find(function (arg) { return arg.search('mapfile-symbols-path=') === 0; });
        if (cliSymbolsetPath) {
            symbolsetPath = cliSymbolsetPath.substring(21);
            symbolsetFrom = 'command line argument';
        }
    }
    if (!symbolsetPath && symbolsPath) {
        // Second fallback to the symbols file. Use the given symbolsPath value.
        symbolsetPath = symbolsPath;
        symbolsetFrom = 'the "symbolsPath" configuration of the parser.';
    }
    if (!symbolsetPath) {
        Logger_1.default.error('No symbolset path defined.');
        return mapfile;
    }
    if (!fs.existsSync(symbolsetPath)) {
        Logger_1.default.error("No file found for symbolset path: " + symbolsetPath + " (path taken from " + symbolsetFrom + ")");
        return mapfile;
    }
    // resolve symbolset
    var symbolsetContent = fs.readFileSync(symbolsetPath, 'utf-8');
    if (symbolsetContent) {
        var mapfileSymbolset = (0, parseMapfile_1.parseSymbolset)(symbolsetContent);
        mapfileSymbols = mapfileSymbolset.symbols;
        substituteSymbols(mapfile);
    }
    else {
        Error('Not able to resolve symbolset!');
    }
    return mapfile;
}
exports.resolveSymbolset = resolveSymbolset;
//# sourceMappingURL=resolveSymbolset.js.map