"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_search_params_1 = __importDefault(require("url-search-params"));
var CsrfUtil_1 = __importDefault(require("../CsrfUtil/CsrfUtil"));
var Logger_1 = __importDefault(require("../Logger"));
/**
 * A Helper class which simplifies some complex request setups as like fetch
 * with POST, CSRF and Content-Type 'application/x-www-form-urlencoded'.
 *
 * @class HttpUtil
 */
var HttpUtil = /** @class */ (function () {
    function HttpUtil() {
    }
    /**
     * A method that performs a fetch POST request with some predefined configs (
     * optimized for the usage with a shogun-core backend).
     *
     * @param {Object} opts The options object to configure the post request.
     *  It can contain the following keys:
     *    {String} url The url we want to send the post to.
     *    {Object} params The post params we want to send. Default is to {}.
     *    {Object} additionalHeaders An object with additional headers as kvp.
     *      Default is to {}.
     *    {Object} additionalFetchOptions An object containing additional options
     *      for the fetch API. Compare https://mdn.io/fetch. Default is to {}.
     *    {Boolean} sameOriginCredentials A flag to whether set the credentials
     *      option to 'same-origin' or let it undefined. Default is to true.
     *    {Boolean} asForm A flag to set the Content-Type header to
     *      'application/x-www-form-urlencoded'. Default is to true.
     */
    HttpUtil.post = function (_a) {
        var url = _a.url, _b = _a.params, params = _b === void 0 ? {} : _b, _c = _a.additionalHeaders, additionalHeaders = _c === void 0 ? {} : _c, _d = _a.additionalFetchOptions, additionalFetchOptions = _d === void 0 ? {} : _d, _e = _a.sameOriginCredentials, sameOriginCredentials = _e === void 0 ? true : _e, _f = _a.asForm, asForm = _f === void 0 ? true : _f;
        var headers = CsrfUtil_1.default.getHeader();
        if (asForm) {
            headers.set('Content-Type', 'application/x-www-form-urlencoded');
        }
        Object.keys(additionalHeaders).forEach(function (headerKey) {
            var headerValue = additionalHeaders[headerKey];
            headers.set(headerKey, headerValue);
        });
        var reqCredentials = sameOriginCredentials ?
            'same-origin' : undefined;
        var formParams = new url_search_params_1.default();
        if (asForm) {
            for (var _i = 0, _g = Object.keys(params); _i < _g.length; _i++) {
                var prop = _g[_i];
                formParams.append(prop, params[prop]);
            }
        }
        var options = __assign({ method: 'POST', credentials: reqCredentials, body: asForm ? formParams : JSON.stringify(params), headers: headers }, additionalFetchOptions);
        return fetch(url, options)
            .catch(function (error) { return Logger_1.default.debug('Fetch error from `HTTPUtil.post`.', error); });
    };
    return HttpUtil;
}());
exports.default = HttpUtil;
