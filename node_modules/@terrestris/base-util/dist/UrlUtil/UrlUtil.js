"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlUtil = void 0;
var url_parse_1 = __importDefault(require("url-parse"));
var query_string_1 = __importDefault(require("query-string"));
var clone_js_1 = __importDefault(require("lodash/clone.js"));
var isURL_1 = __importDefault(require("validator/lib/isURL"));
/**
 * Helper Class for the URL handling.
 *
 * @class
 */
var UrlUtil = /** @class */ (function () {
    function UrlUtil() {
    }
    /**
     * Returns an object representation of an URL.
     *
     * @param {string} url The URL to read in.
     * @return {URL} The parsed URL object.
     */
    UrlUtil.read = function (url) {
        return new url_parse_1.default(url, null, query_string_1.default.parse);
    };
    /**
     * Returns a string representation of an URL object.
     *
     * @param {URL} urlObj The URL object to write out.
     * @return {string} The stringified URL.
     */
    UrlUtil.write = function (urlObj) {
        return urlObj.toString();
    };
    /**
     * Returns the base path of an URL.
     *
     * @param {string} url The URL to obtain the base path from.
     * @return {string} The base path.
     */
    UrlUtil.getBasePath = function (url) {
        var urlObj = UrlUtil.read(url);
        return urlObj.protocol + "//" + urlObj.host + urlObj.pathname;
    };
    /**
     * Returns the query params of a given URL as object.
     *
     * @param {string} url The URL to get the query params from.
     * @return {Object} The query params of the given URL.
     */
    UrlUtil.getQueryParams = function (url) {
        var urlObj = UrlUtil.read(url);
        return urlObj.query;
    };
    /**
     * Returns the value of the given query param of the provided URL. If not
     * found, undefined will be returned.
     *
     * @param {string} url The URL to get the query params from.
     * @param {string} key The key to get the value from.
     * @return {string} The query param value.
     */
    UrlUtil.getQueryParam = function (url, key) {
        var queryParamsObj = UrlUtil.getQueryParams(url);
        var foundKey = Object.keys(queryParamsObj).filter(function (k) { return k.toLowerCase() === key.toLowerCase(); })[0];
        return queryParamsObj[foundKey];
    };
    /**
     * Joins some query parameters (defined by `keys`) of two query objects and
     * returns the joined query parameters.
     *
     *     var params1 = {FOO: 'foo,bar', BAZ: 'baz', HUMPTY: '1'};
     *     var params2 = {FOO: 'pupe,pape', BAZ: 'baz', DUMPTY: '42'};
     *     var keys = ['FOO'];
     *     var joined = this.joinQueryParams(params1, params2, keys);
     *     // joined is now
     *     // {FOO: 'foo,bar,pupe,pape', BAZ: 'baz', HUMPTY: '1'};
     *
     * @param {Object} params1 The first object with parameters, where certain
     *                         keys might have values that are joined with `,`.
     * @param {Object} params2 The second object with parameters, where certain
     *                         keys might have values that are joined with `,`.
     * @param {Array} keys The keys which we will consider for joining. Others
     *                     will be taken from the first object with parameters.
     * @return {Object} The joined query parameters.
     */
    UrlUtil.joinQueryParams = function (params1, params2, keys) {
        var joined = clone_js_1.default(params1);
        var comma = ',';
        keys.forEach(function (key) {
            if (joined[key]) {
                joined[key] = joined[key].split(comma).concat(params2[key].split(comma)).join(comma);
            }
        });
        return joined;
    };
    /**
     * Checks if a given URL has the provided query parameter present.
     *
     * @param {string} url The URL to check.
     * @param {string} key The query parameter to check.
     * @return {boolean} Whether the parameter is present or not.
     */
    UrlUtil.hasQueryParam = function (url, key) {
        var queryParamsObj = UrlUtil.getQueryParams(url);
        return !!Object.keys(queryParamsObj).some(function (k) { return k.toLowerCase() === key.toLowerCase(); });
    };
    /**
     * Creates a valid GetCapabilitiesRequest out of the given URL by checking if
     * SERVICE, REQUEST and VERSION are set.
     *
     * @param {string} url The URL to validate.
     * @param {string} service The service to set. Default is to 'WMS'.
     * @param {string} version The version to set. Default is to '1.3.0'.
     * @return {string} The validated URL.
     */
    UrlUtil.createValidGetCapabilitiesRequest = function (url, service, version) {
        if (service === void 0) { service = 'WMS'; }
        if (version === void 0) { version = '1.3.0'; }
        var baseUrl = UrlUtil.getBasePath(url);
        var queryParamsObject = UrlUtil.getQueryParams(url);
        if (!UrlUtil.hasQueryParam(url, 'SERVICE')) {
            queryParamsObject.SERVICE = service;
        }
        if (!UrlUtil.hasQueryParam(url, 'REQUEST')) {
            queryParamsObject.REQUEST = 'GetCapabilities';
        }
        if (!UrlUtil.hasQueryParam(url, 'VERSION')) {
            queryParamsObject.VERSION = version;
        }
        return baseUrl + "?" + UrlUtil.objectToRequestString(queryParamsObject);
    };
    /**
     * This joins/bundles a given set of (typically WMS GetFeatureInfo) requests
     * by the base URL. E.g. it merges the following two requests:
     *
     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji
     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Kagawa
     *
     * to
     *
     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji,Kagawa
     *
     * @param {Array} featureInfoUrls An array of requests to bundle.
     * @param {boolean} stringify Whether to stringify the output or not. If set
     *                            to false an object keyed by the base URL and
     *                            valued by the combined requests params will be
     *                            returned.
     * @param {Array} bundleParams An array of query params to bundle, default is
     *                             to ['LAYERS', 'QUERY_LAYERS', 'STYLES'].
     */
    UrlUtil.bundleOgcRequests = function (featureInfoUrls, stringify, bundleParams) {
        if (stringify === void 0) { stringify = false; }
        if (bundleParams === void 0) { bundleParams = ['LAYERS', 'QUERY_LAYERS', 'STYLES']; }
        var featureInfoUrlColl = {};
        featureInfoUrls.forEach(function (featureInfoUrl) {
            var featureInfoQueryParams = UrlUtil.getQueryParams(featureInfoUrl);
            var featureInfoBaseUrl = UrlUtil.getBasePath(featureInfoUrl);
            if (!featureInfoUrlColl[featureInfoBaseUrl]) {
                featureInfoUrlColl[featureInfoBaseUrl] = featureInfoQueryParams;
            }
            else {
                var existingQueryParams = featureInfoUrlColl[featureInfoBaseUrl];
                var newQueryParams = featureInfoQueryParams;
                featureInfoUrlColl[featureInfoBaseUrl] = UrlUtil.joinQueryParams(existingQueryParams, newQueryParams, bundleParams);
            }
        });
        var urls = [];
        if (stringify) {
            for (var _i = 0, _a = Object.entries(featureInfoUrlColl); _i < _a.length; _i++) {
                var _b = _a[_i], baseUrl = _b[0], queryParams = _b[1];
                var urlObj = UrlUtil.read(baseUrl);
                urlObj.set('query', queryParams);
                urls.push(UrlUtil.write(urlObj));
            }
            return urls;
        }
        return featureInfoUrlColl;
    };
    /**
     * Transforms an object into a string containing requestParams (without
     * leading questionmark).
     *
     * @param {Object} object An object containing kvp for the request.
     *                        e.g. {height:400, width:200}
     * @return {string} The kvps as a requestString. e.g. 'height=400&width=200'
     */
    UrlUtil.objectToRequestString = function (object) {
        var requestString = Object.keys(object).map(function (key) {
            return encodeURIComponent(key) + '=' + encodeURIComponent(object[key]);
        }).join('&');
        return requestString;
    };
    /**
     * Checks if a given URL is valid. Implementation based on
     * https://www.npmjs.com/package/validator.
     *
     * @param {string} url The URL to validate.
     * @param {Object} opts The validation `validator` options.
     * @return {boolean} Whether the URL is valid or not.
     */
    UrlUtil.isValid = function (url, opts) {
        if (opts === void 0) { opts = {
            require_tld: false,
            require_protocol: true,
            protocols: ['http', 'https', 'ftp'],
            require_host: true,
            require_valid_protocol: true,
            allow_underscores: false,
            allow_trailing_dot: false,
            allow_protocol_relative_urls: false,
            disallow_auth: false
        }; }
        return isURL_1.default(url, opts);
    };
    return UrlUtil;
}());
exports.UrlUtil = UrlUtil;
exports.default = UrlUtil;
