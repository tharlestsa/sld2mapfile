{"version":3,"file":"functions.js","sourceRoot":"","sources":["../functions.ts"],"names":[],"mappings":";;AAyEC,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAWD,CAAC;AAYD,CAAC;AAWD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAWD,CAAC;AASD,CAAC;AAUD,CAAC;AAQD,CAAC;AAQD,CAAC;AAQD,CAAC;AAcD,CAAC;AAWD,CAAC;AAOD,CAAC;AAWD,CAAC;AAWD,CAAC;AAOD,CAAC;AAYD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAcD,CAAC;AAUD,CAAC;AAQD,CAAC;AAWD,CAAC;AAWD,CAAC;AAWD,CAAC;AAYD,CAAC;AAYD,CAAC;AAUD,CAAC;AAYD,CAAC;AAgBD,CAAC;AAWD,CAAC;AAUD,CAAC;AAcD,CAAC;AAYD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC;AAUD,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n  FunctionCall,\n  Expression\n} from './style';\n\nexport type GeoStylerFunction = GeoStylerNumberFunction |\n  GeoStylerStringFunction |\n  GeoStylerBooleanFunction |\n  GeoStylerUnknownFunction;\n\nexport type GeoStylerNumberFunction = GeoStylerUnknownFunction |\nFabs |\nFacos |\nFasin |\nFatan |\nFatan2 |\nFceil |\nFcos |\nFexp |\nFfloor |\nFlog |\nFmax |\nFmin |\nFmodulo |\nFpi |\nFpow |\nFrandom |\nFrint |\nFround |\nFsin |\nFsqrt |\nFstrIndexOf |\nFstrLastIndexOf |\nFstrLength |\nFtan |\nFtoDegrees |\nFtoRadians;\n\nexport type GeoStylerStringFunction = GeoStylerUnknownFunction |\nFnumberFormat |\nFstrAbbreviate |\nFstrCapitalize |\nFstrConcat |\nFstrDefaultIfBlank |\nFstrReplace |\nFstrStripAccents |\nFstrSubstring |\nFstrSubstringStart |\nFstrToLowerCase |\nFstrToUpperCase |\nFstrTrim;\n\nexport type GeoStylerBooleanFunction = GeoStylerUnknownFunction |\nFbetween |\nFdouble2bool |\nFin |\nFparseBoolean |\nFstrEndsWith |\nFstrEqualsIgnoreCase |\nFstrMatches |\nFstrStartsWith;\n\nexport type GeoStylerUnknownFunction = Fproperty;\n\n/**\n * The absolute value of the specified number value\n */\nexport interface Fabs extends FunctionCall<number> {\n  name: 'abs';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the arc cosine of an angle in radians, in the range of 0.0 through PI\n */\nexport interface Facos extends FunctionCall<number> {\n  name: 'acos';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the arc sine of an angle in radians, in the range of -PI / 2 through PI / 2\n */\nexport interface Fasin extends FunctionCall<number> {\n  name: 'asin';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the arc tangent of an angle in radians, in the range of -PI/2 through PI/2\n */\nexport interface Fatan extends FunctionCall<number> {\n  name: 'atan';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Converts a rectangular coordinate (x, y) to polar (r, theta) and returns theta.\n */\nexport interface Fatan2 extends FunctionCall<number> {\n  name: 'atan2';\n  args: [\n    Expression<number>,\n    Expression<number>\n  ];\n};\n\n/**\n * Returns true if arg1 <= arg0 <= arg2\n */\nexport interface Fbetween extends FunctionCall<boolean> {\n  name: 'between';\n  args: [\n    Expression<number>,\n    Expression<number>,\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the smallest (closest to negative infinity) number value that is greater than or equal to\n * x and is equal to a mathematical integer.\n */\nexport interface Fceil extends FunctionCall<number> {\n  name: 'ceil';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the cosine of an angle expressed in radians\n */\nexport interface Fcos extends FunctionCall<number> {\n  name: 'cos';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns true if x is zero, false otherwise\n */\nexport interface Fdouble2bool extends FunctionCall<boolean> {\n  name: 'double2bool';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns Euler’s number e raised to the power of x\n */\nexport interface Fexp extends FunctionCall<number> {\n  name: 'exp';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the largest (closest to positive infinity) value that is less than or equal to x and is\n * equal to a mathematical integer\n */\nexport interface Ffloor extends FunctionCall<number> {\n  name: 'floor';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns true if arguments[0] is equal to one of the arguments[1], …, arguments[n] values. Use the\n * function name matching the number of arguments specified.\n */\nexport interface Fin extends FunctionCall<boolean> {\n  name: 'in';\n  args: Expression<string>[];\n};\n\n/**\n * Returns the natural logarithm (base e) of x\n */\nexport interface Flog extends FunctionCall<number> {\n  name: 'log';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the maximum between argument[0], …, argument[n]\n */\nexport interface Fmax extends FunctionCall<number> {\n  name: 'max';\n  args: Expression<number>[];\n};\n\n/**\n * Returns the minimum between argument[0], …, argument[n]\n */\nexport interface Fmin extends FunctionCall<number> {\n  name: 'min';\n  args: Expression<number>[];\n};\n\nexport interface Fmodulo extends FunctionCall<number> {\n  name: 'modulo';\n  args: [\n    Expression<number>,\n    Expression<number>\n  ];\n};\n\n/**\n * Formats the number (argument[1]) according to the specified format (arguments[0]) using the default locale\n * or the one provided (argument[2]) as an optional argument. The format syntax can be found\n * in the Java DecimalFormat javadocs\n */\nexport interface FnumberFormat extends FunctionCall<string> {\n  name: 'numberFormat';\n  args: [\n    Expression<string>,\n    Expression<number>,\n    Expression<string>\n  ];\n};\n\n/**\n * Parses a string into a boolean. The empty string, f, 0.0 and 0 are considered false, everything\n * else is considered true.\n */\nexport interface FparseBoolean extends FunctionCall<boolean> {\n  name: 'parseBoolean';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns an approximation of pi, the ratio of the circumference of a circle to its diameter\n */\nexport interface Fpi extends Omit<FunctionCall<number>, 'args'> {\n  name: 'pi';\n};\n\n/**\n * Returns the value of base (argument[0]) raised to the power of exponent (arguments[1])\n */\nexport interface Fpow extends FunctionCall<number> {\n  name: 'pow';\n  args: [\n    Expression<number>,\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the value of the property argument[0]. Allows property names to be compute\n * or specified by Variable substitution in SLD.\n */\nexport interface Fproperty extends FunctionCall<unknown> {\n  name: 'property';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns a Double value with a positive sign, greater than or equal to 0.0 and less than 1.0.\n */\nexport interface Frandom extends Omit<FunctionCall<number>, 'args'> {\n  name: 'random';\n};\n\n/**\n * Returns the Double value that is closest in value to the argument and is equal to a mathematical\n * integer. If two double values that are mathematical integers are equally close, the result is the\n * integer value that is even.\n */\nexport interface Frint extends FunctionCall<number> {\n  name: 'rint';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the closest number to argument[0].\n */\nexport interface Fround extends FunctionCall<number> {\n  name: 'round';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the sine of an angle expressed in radians\n */\nexport interface Fsin extends FunctionCall<number> {\n  name: 'sin';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the square root of argument[0]\n */\nexport interface Fsqrt extends FunctionCall<number> {\n  name: 'sqrt';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Abbreviates the sentence (argument[0]) at first space beyond lower (argument[1])\n * or at upper (argument[2]) if no space.Appends append (argument[3]) if string is abbreviated.\n */\nexport interface FstrAbbreviate extends FunctionCall<string> {\n  name: 'strAbbreviate';\n  args: [\n    Expression<string>,\n    Expression<number>,\n    Expression<number>,\n    Expression<string>\n  ];\n};\n\n/**\n * Fully capitalizes the sentence. For example, “HoW aRe YOU?” will be turned into “How Are You?”\n */\nexport interface FstrCapitalize extends FunctionCall<string> {\n  name: 'strCapitalize';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Concatenates the two strings into one\n */\nexport interface FstrConcat extends FunctionCall<string> {\n  name: 'strConcat';\n  args: Expression<string>[];\n};\n\n/**\n * Returns default (argument[1]) if str (argument[0]) is empty, blank or null\n */\nexport interface FstrDefaultIfBlank extends FunctionCall<string> {\n  name: 'strDefaultIfBlank';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns true if string (argument[0]) ends with suffix (argument[1])\n  */\nexport interface FstrEndsWith extends FunctionCall<boolean> {\n  name: 'strEndsWith';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns true if the two strings are equal ignoring case considerations\n */\nexport interface FstrEqualsIgnoreCase extends FunctionCall<boolean> {\n  name: 'strEqualsIgnoreCase';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the index within this string (argument[0]) of the first occurrence of the specified\n * substring (argument[1]), or -1 if not found\n */\nexport interface FstrIndexOf extends FunctionCall<number> {\n  name: 'strIndexOf';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the index within this string (arguments[0]) of the last occurrence of the specified\n * substring (arguments[1]), or -1 if not found\n */\nexport interface FstrLastIndexOf extends FunctionCall<number> {\n  name: 'strLastIndexOf';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the string length\n */\nexport interface FstrLength extends FunctionCall<number>{\n  name: 'strLength';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns true if the string (arguments[0]) matches the specified regular expression (arguments[1]).\n * For the full syntax of the pattern specification see the Java Pattern class javadocs\n */\nexport interface FstrMatches extends FunctionCall<boolean> {\n  name: 'strMatches';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the string (argument[0]) with the pattern (argument[1]) replaced with the given\n * replacement (argument[2]) text. If the global argument (argument[3]) is true then all occurrences of the pattern\n * will be replaced, otherwise only the first. For the full syntax of the pattern specification see\n * the Java Pattern class javadocs\n */\nexport interface FstrReplace extends FunctionCall<string> {\n  name: 'strReplace';\n  args: [\n    Expression<string>,\n    Expression<string>,\n    Expression<string>,\n    Expression<boolean>\n  ];\n};\n\n/**\n * Returns true if string (argument[0]) starts with prefix (argument[1]).\n */\nexport interface FstrStartsWith extends FunctionCall<boolean> {\n  name: 'strStartsWith';\n  args: [\n    Expression<string>,\n    Expression<string>\n  ];\n};\n\n/**\n * Removes diacritics (~= accents) from a string. The case will not be altered.\n */\nexport interface FstrStripAccents extends FunctionCall<string> {\n  name: 'strStripAccents';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns a new string that is a substring of this string (argument[0]). The substring begins\n * at the specified begin (argument[1]) and extends to the character at index endIndex (argument[2]) - 1\n * (indexes are zero-based).\n */\nexport interface FstrSubstring extends FunctionCall<string> {\n  name: 'strSubstring';\n  args: [\n    Expression<string>,\n    Expression<number>,\n    Expression<number>\n  ];\n};\n\n/**\n * Returns a new string that is a substring of this string (argument[0]). The substring begins\n * at the specified begin (arguments[1]) and extends to the last character of the string\n */\nexport interface FstrSubstringStart extends FunctionCall<string> {\n  name: 'strSubstringStart';\n  args: [\n    Expression<string>,\n    Expression<number>\n  ];\n};\n\n/**\n * Returns the lower case version of the string\n */\nexport interface FstrToLowerCase extends FunctionCall<string> {\n  name: 'strToLowerCase';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the upper case version of the string\n */\nexport interface FstrToUpperCase extends FunctionCall<string> {\n  name: 'strToUpperCase';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns a copy of the string, with leading and trailing blank-space omitted\n */\nexport interface FstrTrim extends FunctionCall<string> {\n  name: 'strTrim';\n  args: [\n    Expression<string>\n  ];\n};\n\n/**\n * Returns the trigonometric tangent of angle expressed in radians\n */\nexport interface Ftan extends FunctionCall<number> {\n  name: 'tan';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Converts an angle expressed in radians into degrees\n */\nexport interface FtoDegrees extends FunctionCall<number> {\n  name: 'toDegrees';\n  args: [\n    Expression<number>\n  ];\n};\n\n/**\n * Converts an angle expressed in radians into degrees\n */\nexport interface FtoRadians extends FunctionCall<number> {\n  name: 'toRadians';\n  args: [\n    Expression<number>\n  ];\n};\n"]}