/**
 * Convert a color in RGB (R G B) format to hexadecimal (#RRGGBB) format
 *
 * @param {string} s The string representing the color in RGB in the Mapfile file
 * @return {string} The same color in hexadecimal format
 */
export declare function rgbToHex(s: string): string;
/**
 * Tests if a given string is a valid hex number
 *
 * @param {string} hex The string to test
 * @returns {boolean} Returns true or false as the result of testing the string
 */
export declare function isHex(hex: string): boolean;
/**
 * Convert a color range in RGB (R G B R G B) format to hexadecimal (#RRGGBB) array
 *
 * @param {string} s The strings representing the range of colors in RGB in the Mapfile file
 * @return {string[]} The same colors as an array of strings in hexadecimal format
*/
export declare function rgbRangeToHexArray(s: string): string[];
/**
 * Test weather an sequence of point coordinates represent a Square
 *
 * @param {Array<number>} points An array of x, y coordinates
 * @return {boolean}
 */
export declare function isSquare(points: number[]): boolean;
/**
 * Test weather an sequence of point coordinates represent a Triangle
 *
 * @param {Array<number>} points An array of x, y coordinates
 * @return {boolean}
 */
export declare function isTriangle(points: number[]): boolean;
/**
 * Test weather an sequence of point coordinates represent a Cross
 *
 * @param {Array<number>} points An array of x, y coordinates
 * @return {boolean}
 */
export declare function isCross(points: number[]): boolean;
