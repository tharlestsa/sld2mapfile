/**
 * This class provides some static methods which might be helpful when working
 * with objects.
 *
 * @class ObjectUtil
 */
declare class ObjectUtil {
    /**
     * Returns the dot delimited path of a given object by the given
     * key-value pair. Example:
     *
     * ```
     * const obj = {
     *   level: 'first',
     *   nested: {
     *     level: 'second'
     *   }
     * };
     * const key = 'level';
     * const value = 'second';
     *
     * ObjectUtil.getPathByKeyValue(obj, key, value); // 'nested.level'
     * ```
     *
     * Note: It will return the first available match!
     *
     * @param {Object} obj The object to obtain the path from.
     * @param {string} key The key to look for.
     * @param {string|number|boolean} value The value to look for.
     * @param {string} [currentPath=''] The currentPath (if called in a recursion)
     *                                  or the custom root path (default is to '').
     */
    static getPathByKeyValue(obj: any, key: string, value: string | number | boolean, currentPath?: string): string | undefined;
    /**
     * Method may be used to return a value of a given input object by a
     * provided query key. The query key can be used in two ways:
     *   * Single-value: Find the first matching key in the provided object
     *     (Use with caution as the object/array order may not be as
     *     expected and/or deterministic!).
     *   * Backslash ("/") separated value: Find the last (!) matching key
     *     in the provided object.
     *
     * @param {string} queryKey The key to be searched.
     * @param {Object} queryObject The object to be searched on
     *
     * @return {*} The target value or `undefined` if the given couldn't be
     *     found, or an object if a path was passed, from which we only could
     *     find a part, but not the most specific one.
     *     TODO Harmonize return values
     */
    static getValue(queryKey: string, queryObject: any): any;
}
export default ObjectUtil;
