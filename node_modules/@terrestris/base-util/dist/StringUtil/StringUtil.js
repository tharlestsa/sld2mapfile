"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isString_js_1 = __importDefault(require("lodash/isString.js"));
/**
 * Helper Class for Strings
 */
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
     * Replaces any occurrence of a link-like text with an `<a>`-tag.
     *
     * @param {string} text The string context to replace.
     * @return {string} The urlified string.
     */
    StringUtil.urlify = function (text) {
        var urlRegex = /(https?:\/\/[^\s]+)/g;
        return text.replace(urlRegex, "<a href=\"$1\" target=\"_blank\">$1</a>");
    };
    /**
     * This coerces the value of a string by casting it to the most plausible
     * datatype, guessed by the value itself.
     *
     * @param {string} str The input string to coerce.
     * @return {*} The coerced value.
     */
    StringUtil.coerce = function (str) {
        if (!isString_js_1.default(str)) {
            return str;
        }
        var isFloatRegex = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
        if (str.toLowerCase() === 'true') {
            return true;
        }
        else if (str.toLowerCase() === 'false') {
            return false;
        }
        else if (isFloatRegex.test(str)) {
            return parseFloat(str);
        }
        else if (str.startsWith('[')) {
            return JSON.parse(str).map(function (a) { return StringUtil.coerce(a); });
        }
        else if (str.startsWith('{')) {
            var parsedObj_1 = JSON.parse(str);
            var coercedObj_1 = {};
            Object.keys(parsedObj_1).forEach(function (key) {
                coercedObj_1[key] = StringUtil.coerce(parsedObj_1[key]);
            });
            return coercedObj_1;
        }
        else {
            return str;
        }
    };
    /**
     * Returns a string that is wrapped: every ~`width` chars a space is
     * replaced with the passed `spaceReplacer`.
     *
     * See https://stackoverflow.com/questions/14484787/wrap-text-in-javascript
     *
     * @param {string} str The string to wrap.
     * @param {number} width The width of a line (number of characters).
     * @param {string} spaceReplacer The string to replace spaces with.
     * @return {string} The 'wrapped' string.
     */
    StringUtil.stringDivider = function (str, width, spaceReplacer) {
        var startIndex = 0;
        var stopIndex = width;
        if (str.length > width) {
            var p = width;
            var left = void 0;
            var right = void 0;
            while (p > 0 && (str[p] !== ' ' && str[p] !== '-')) {
                p--;
            }
            if (p > 0) {
                if (str.substring(p, p + 1) === '-') {
                    left = str.substring(0, p + 1);
                }
                else {
                    left = str.substring(0, p);
                }
                right = str.substring(p + 1);
                return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);
            }
            else {
                // no whitespace or - found,
                // splitting hard on the width length
                left = str.substring(startIndex, stopIndex + 1) + '-';
                right = str.substring(stopIndex + 1);
                startIndex = stopIndex;
                stopIndex += width;
                return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);
            }
        }
        return str;
    };
    /**
     * Returns the displayed text of an string with html text.
     *
     * @param {string} htmlString A string containing html.
     * @return {string} The stripped Text.
     */
    StringUtil.stripHTMLTags = function (htmlString) {
        var stripped;
        if (DOMParser) {
            // Inspired by https://stackoverflow.com/a/47140708
            var doc = (new DOMParser()).parseFromString(htmlString, 'text/html');
            stripped = doc.body.textContent || '';
        }
        return stripped;
    };
    /**
     * Removes duplicated forward slashes as well as trailing slash
     * and returns normalized URL string.
     *
     * @param {string} url Original URL string.
     * @return {string} Sanitized URL string.
     */
    StringUtil.sanitizeUrl = function (url) {
        return url.replace(/([^:]\/)\/+/g, '$1').replace(/\/+$/, '');
    };
    return StringUtil;
}());
exports.default = StringUtil;
