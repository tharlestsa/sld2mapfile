{
  
  "0": {
    "title": "API",
    "content": "Basic usage . /** * @param {object} vector layer * @param {string} text the xml text * apply sld */ function applySLD(vectorLayer, text) { const sldObject = SLDReader.Reader(text); const sldLayer = SLDReader.getLayer(sldObject); const style = SLDReader.getStyle(sldLayer, &#39;bestuurlijkegrenzen:provincies&#39;); const featureTypeStyle = style.featuretypestyles[0]; const viewProjection = map.getView().getProjection(); vectorLayer.setStyle(SLDReader.createOlStyleFunction(featureTypeStyle, { // Use the convertResolution option to calculate a more accurate resolution. convertResolution: viewResolution =&gt; { const viewCenter = map.getView().getCenter(); return ol.proj.getPointResolution(viewProjection, viewResolution, viewCenter); }, // If you use point icons with an ExternalGraphic, you have to use imageLoadCallback to // to update the vector layer when an image finishes loading. // If you do not do this, the image will only become visible after the next pan/zoom of the layer. imageLoadedCallback: () =&gt; { vectorLayer.changed(); }, })); } const vectorSource = new ol.source.Vector({ format: new ol.format.GeoJSON(), url: &#39;assets/provincies.json&#39;, strategy: ol.loadingstrategy.bbox, }); const vectorLayer = new ol.layer.Vector({ source: vectorSource, style: new ol.style.Style({ stroke: new ol.style.Stroke({ color: &#39;rgba(0, 0, 255, 1.0)&#39;, width: 2, }), }), }); applySLD(vectorLayer, mySLDString); . Modules . Reader/filter Factory methods for filterelements . Reader/index Functions . getGeometryStyles(rules) ⇒ GeometryStyles Get styling from rules per geometry type . createOlStyleFunction(featureTypeStyle, options) ⇒ function Create an OpenLayers style function from a FeatureTypeStyle object extracted from an SLD document. . Important! When using externalGraphics for point styling, make sure to call .changed() on the layer inside options.imageLoadedCallback to immediately see the loaded image. If you do not do this, the image icon will only become visible the next time OpenLayers draws the layer (after pan or zoom). . getLayerNames(sld) ⇒ Array.&lt;string&gt; get all layer names in sld . getLayer(sld, [layername]) ⇒ Layer Get layer definition from sld . getStyleNames(layer) ⇒ Array.&lt;string&gt; getStyleNames, notice name is not required for userstyle, you might get undefined . getStyle(layer, [name]) ⇒ object get style from array layer.styles, if name is undefined it returns default style. null is no style found . getRules(featureTypeStyle, feature, resolution) ⇒ Array.&lt;Rule&gt; get rules for specific feature after applying filters . getRuleSymbolizers(rule) ⇒ Array.&lt;object&gt; Get all symbolizers inside a given rule. Note: this will be a mix of Point/Line/Polygon/Text symbolizers. . Typedefs . GeometryStyles contains for each geometry type the symbolizer from an array of rules . Filter filter operators, see also geoserver . StyledLayerDescriptor a typedef for StyledLayerDescriptor xsd . Layer a typedef for Layer, the actual style object for a single layer . FeatureTypeStyle a typedef for FeatureTypeStyle: xsd . Rule a typedef for Rule to match a feature: xsd . PolygonSymbolizer a typedef for PolygonSymbolizer, see also geoserver docs . LineSymbolizer a typedef for LineSymbolizer, see also geoserver docs . PointSymbolizer a typedef for PointSymbolizer xsd &amp; geoserver docs . . Reader/filter . Factory methods for filterelements . See: http://schemas.opengis.net/filter/1.0.0/filter.xsd . module.exports(element) ⇒ Filter ⏏ . Factory root filter element . Kind: Exported function . Param Type . element | Element | . . Reader/index . . module.exports(sld) ⇒ StyledLayerDescriptor ⏏ . Creates a object from an sld xml string, . Kind: Exported function Returns: StyledLayerDescriptor - object representing sld style . Param Type Description . sld | string | xml string | . . getGeometryStyles(rules) ⇒ GeometryStyles . Get styling from rules per geometry type . Kind: global function . Param Type Description . rules | Array.&lt;Rule&gt; | [description] | . . createOlStyleFunction(featureTypeStyle, options) ⇒ function . Create an OpenLayers style function from a FeatureTypeStyle object extracted from an SLD document. . Important! When using externalGraphics for point styling, make sure to call .changed() on the layer inside options.imageLoadedCallback to immediately see the loaded image. If you do not do this, the image icon will only become visible the next time OpenLayers draws the layer (after pan or zoom). . Kind: global function Returns: function - A function that can be set as style function on an OpenLayers vector style layer. . Param Type Description . featureTypeStyle | FeatureTypeStyle | Feature Type Style object. | . options | object | Options | . options.convertResolution | function | An optional function to convert the resolution in map units/pixel to resolution in meters/pixel. When not given, the map resolution is used as-is. | . options.imageLoadedCallback | function | Optional callback that will be called with the url of an externalGraphic when an image has been loaded (successfully or not). Call .changed() inside the callback on the layer to see the loaded image. | . options.getProperty | function | Optional custom property getter: (feature, propertyName) =&gt; property value. | . Example . myOlVectorLayer.setStyle(SLDReader.createOlStyleFunction(featureTypeStyle, { imageLoadedCallback: () =&gt; { myOlVectorLayer.changed(); } })); . . getLayerNames(sld) ⇒ Array.&lt;string&gt; . get all layer names in sld . Kind: global function Returns: Array.&lt;string&gt; - registered layernames . Param Type . sld | StyledLayerDescriptor | . . getLayer(sld, [layername]) ⇒ Layer . Get layer definition from sld . Kind: global function Returns: Layer - [description] . Param Type Description . sld | StyledLayerDescriptor | [description] | . [layername] | string | optional layername | . . getStyleNames(layer) ⇒ Array.&lt;string&gt; . getStyleNames, notice name is not required for userstyle, you might get undefined . Kind: global function Returns: Array.&lt;string&gt; - [description] . Param Type Description . layer | Layer | [description] | . . getStyle(layer, [name]) ⇒ object . get style from array layer.styles, if name is undefined it returns default style. null is no style found . Kind: global function Returns: object - the style from layer.styles matching the name . Param Type Description . layer | Layer | [description] | . [name] | string | of style | . . getRules(featureTypeStyle, feature, resolution) ⇒ Array.&lt;Rule&gt; . get rules for specific feature after applying filters . Kind: global function . Param Type Description . featureTypeStyle | FeatureTypeStyle |   | . feature | object | geojson | . resolution | number | m/px | . options.getProperty | function | An optional function with parameters (feature, propertyName) that can be used to extract a property value from a feature. When not given, properties are read from feature.properties directly.Error | . options.getFeatureId | function | An optional function to extract the feature id from a feature.Error When not given, feature id is read from feature.id. | . Example . const style = getStyle(sldLayer, stylename); getRules(style.featuretypestyles[&#39;0&#39;], geojson, resolution); . . getRuleSymbolizers(rule) ⇒ Array.&lt;object&gt; . Get all symbolizers inside a given rule. Note: this will be a mix of Point/Line/Polygon/Text symbolizers. . Kind: global function Returns: Array.&lt;object&gt; - Array of all symbolizers in a rule. . Param Type Description . rule | object | SLD rule object. | . . GeometryStyles . contains for each geometry type the symbolizer from an array of rules . Kind: global typedef Properties . Name Type Description . polygon | Array.&lt;PolygonSymbolizer&gt; | polygonsymbolizers | . line | Array.&lt;LineSymbolizer&gt; | linesymbolizers | . point | Array.&lt;PointSymbolizer&gt; | pointsymbolizers, same as graphic prop from PointSymbolizer | . . Filter . filter operators, see also geoserver . Kind: global typedef Properties . Name Type Description . type | string | Can be ‘comparison’, ‘and’, ‘or’, ‘not’, or ‘featureid’. | . [fids] | Array.&lt;string&gt; | An array of feature id’s. Required for type=’featureid’. | . [operator] | string | Required for type=’comparison’. Can be one of ‘propertyisequalto’, ‘propertyisnotequalto’, ‘propertyislessthan’, ‘propertyislessthanorequalto’, ‘propertyisgreaterthan’, ‘propertyisgreaterthanorequalto’, ‘propertyislike’, ‘propertyisbetween’ | . [predicates] | Array.&lt;Filter&gt; | Required for type=’and’ or type=’or’. An array of filter predicates that must all evaluate to true for ‘and’, or for which at least one must evaluate to true for ‘or’. | . [predicate] | Filter | Required for type=’not’. A single predicate to negate. | . [propertyname] | string | Required for type=’comparison’. | . [literal] | string | A literal value to use in a comparison, required for type=’comparison’. | . [lowerboundary] | string | Lower boundary, required for operator=’propertyisbetween’. | . [upperboundary] | string | Upper boundary, required for operator=’propertyisbetween’. | . [wildcard] | string | Required wildcard character for operator=’propertyislike’. | . [singlechar] | string | Required single char match character, required for operator=’propertyislike’. | . [escapechar] | string | Required escape character for operator=’propertyislike’. | . . StyledLayerDescriptor . a typedef for StyledLayerDescriptor xsd . Kind: global typedef Properties . Name Type Description . version | string | sld version | . layers | Array.&lt;Layer&gt; | info extracted from NamedLayer element | . . Layer . a typedef for Layer, the actual style object for a single layer . Kind: global typedef Properties . Name Type Description . name | string | layer name | . styles | Array.&lt;Object&gt; | See explanation at Geoserver docs | . styles[].default | Boolean |   | . [styles[].name] | String |   | . styles[].featuretypestyles | Array.&lt;FeatureTypeStyle&gt; | Geoserver will draw multiple, libraries as openlayers can only use one definition! | . . FeatureTypeStyle . a typedef for FeatureTypeStyle: xsd . Kind: global typedef Properties . Name Type . rules | Array.&lt;Rule&gt; | . . Rule . a typedef for Rule to match a feature: xsd . Kind: global typedef Properties . Name Type Description . name | string | rule name | . [filter] | Array.&lt;Filter&gt; |   | . [elsefilter] | boolean |   | . [minscaledenominator] | integer |   | . [maxscaledenominator] | integer |   | . [polygonsymbolizer] | PolygonSymbolizer |   | . [linesymbolizer] | LineSymbolizer |   | . [pointsymbolizer] | PointSymbolizer |   | . . PolygonSymbolizer . a typedef for PolygonSymbolizer, see also geoserver docs . Kind: global typedef Properties . Name Type Description . fill | Object |   | . fill.css | array | one object per CssParameter with props name (camelcased) &amp; value | . stroke | Object |   | . stroke.css | Array.&lt;Object&gt; | with camelcased name &amp; value | . . LineSymbolizer . a typedef for LineSymbolizer, see also geoserver docs . Kind: global typedef Properties . Name Type Description . stroke | Object |   | . stroke.css | Array.&lt;Object&gt; | one object per CssParameter with props name (camelcased) &amp; value | . graphicstroke | Object |   | . graphicstroke.graphic | Object |   | . graphicstroke.graphic.mark | Object |   | . graphicstroke.graphic.mark.wellknownname | string |   | . graphicstroke.graphic.mark.fill | Object |   | . graphicstroke.graphic.mark.stroke | Object |   | . graphicstroke.graphic.opacity | Number |   | . graphicstroke.graphic.size | Number |   | . graphicstroke.graphic.rotation | Number |   | . . PointSymbolizer . a typedef for PointSymbolizer xsd &amp; geoserver docs . Kind: global typedef Properties . Name Type . graphic | Object | . graphic.externalgraphic | Object | . graphic.externalgraphic.onlineresource | string | . graphic.mark | Object | . graphic.mark.wellknownname | string | . graphic.mark.fill | Object | . graphic.mark.stroke | Object | . graphic.opacity | Number | . graphic.size | Number | . graphic.rotation | Number | .",
    "url": "http://localhost:4000/api.html",
    "relUrl": "/api.html"
  }
  ,"1": {
    "title": "Flags of Benelux countries",
    "content": "Point symbolizers with ExternalGraphic . This example requires an up to date browser! . View code . &lt;/div&gt; .",
    "url": "http://localhost:4000/benelux.html",
    "relUrl": "/benelux.html"
  }
  ,"2": {
    "title": "Provinces of the netherlands",
    "content": "Provinces of the netherlands . This example requires an up to date browser! . View code . &lt;/div&gt; .",
    "url": "http://localhost:4000/grenzen.html",
    "relUrl": "/grenzen.html"
  }
  ,"3": {
    "title": "GraphicStroke",
    "content": "GraphicStroke . This example requires an up to date browser! . View code . &lt;/input&gt; Mark &lt;/input&gt; ExternalGraphic &lt;/input&gt; Vendor option: pointPlacement",
    "url": "http://localhost:4000/hoogspanning.html",
    "relUrl": "/hoogspanning.html"
  }
  ,"4": {
    "title": "Tasmania",
    "content": "Openlayers SLD example . Choose a style for the waterbodies Example tries to replicate openlayer 2.13 example Road style uses two overlaying lines. . &lt;/div&gt; .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  
}