{"version":3,"file":"SldUtil.js","sourceRoot":"","sources":["../../../src/Util/SldUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Expression,\n  GeoStylerFunction,\n  GeoStylerNumberFunction,\n  isGeoStylerFunction,\n  isGeoStylerNumberFunction,\n  PropertyType\n} from 'geostyler-style';\nimport { SldVersion } from '../SldStyleParser';\n\n/**\n * Cast to Number if it is not a GeoStylerFunction\n *\n * @param exp The GeoStylerExpression\n * @returns The value casted to a number or the GeoStylerNumberFunction\n */\nexport function numberExpression(exp: Expression<PropertyType>): GeoStylerNumberFunction | number {\n  return isGeoStylerNumberFunction(exp) ? exp : Number(exp);\n}\n\n/**\n * This converts a GeoStylerFunction into a fast-xml-parser representation\n * of a sld function.\n *\n * @param geostylerFunction A GeoStylerFunction\n * @returns\n */\nexport function geoStylerFunctionToSldFunction(geostylerFunction: GeoStylerFunction): any {\n  const {\n    name\n  } = geostylerFunction;\n\n  // TODO: Typing of functions without args should be refactored in geostyler-style\n  if (name === 'pi' || name === 'random') {\n    return [{\n      Function: [],\n      ':@': {\n        '@_name': name\n      }\n    }];\n  }\n\n  if (name === 'property') {\n    return {\n      PropertyName: [{\n        '#text': geostylerFunction.args[0]\n      }]\n    };\n  }\n\n  const sldFunctionArgs = geostylerFunction.args.map(arg => {\n    if (isGeoStylerFunction(arg)) {\n      const argAsFunction = geoStylerFunctionToSldFunction(arg);\n      return Array.isArray(argAsFunction) ? argAsFunction[0] : argAsFunction;\n    } else {\n      return {\n        Literal: [{\n          '#text': arg\n        }]\n      };\n    }\n  });\n\n  const sldFunctionObj = [{\n    Function: sldFunctionArgs,\n    ':@': {\n      '@_name': name\n    }\n  }];\n\n  return sldFunctionObj;\n}\n\n/**\n * This converts the fast-xml-parser representation of a sld function into\n * a GeoStylerFunction.\n *\n * @param sldFunction An array of objects as created by the fast-xml-parser\n * @returns The GeoStylerFunction\n */\nexport function sldFunctionToGeoStylerFunction(sldFunction: any[]): GeoStylerFunction {\n  const name = sldFunction?.[0]?.[':@']?.['@_name'];\n  const args = sldFunction?.[0].Function.map((sldArg: any) => {\n    if (sldArg.Function) {\n      return sldFunctionToGeoStylerFunction([sldArg]);\n    } else if (sldArg.PropertyName) {\n      return {\n        name: 'property',\n        args: [sldArg?.PropertyName?.[0]?.['#text']]\n      };\n    } else {\n      return sldArg?.Literal?.[0]?.['#text'];\n    }\n  });\n\n  const geoStylerFunction: any = { name  };\n  if (args.length > 0) {\n    geoStylerFunction.args = args;\n  }\n  return geoStylerFunction;\n}\n\n/**\n * Get all child objects with a given tag name.\n *\n * @param elements An array of objects as created by the fast-xml-parser.\n * @param tagName The tagname to get.\n * @returns An array of objects as created by the fast-xml-parser.\n */\nexport function getChildren(elements: any[], tagName: string): any[] {\n  return elements?.filter(obj => Object.keys(obj).includes(tagName));\n}\n\n/**\n * Get the child object with a given tag name.\n *\n * @param elements An array of objects as created by the fast-xml-parser.\n * @param tagName The tagname to get.\n * @returns An object as created by the fast-xml-parser.\n */\nexport function getChild(elements: any[], tagName: string): any {\n  return elements?.find(obj => Object.keys(obj).includes(tagName));\n}\n\n/**\n * Get the value of a Css-/SvgParameter.\n *\n * @param elements An array of objects as created by the fast-xml-parser.\n * @param parameter The parameter name to get.\n * @param sldVersion The sldVersion to distinguish if CssParameter or SvgParameter is used.\n * @returns The string value of the searched parameter.\n */\nexport function getParameterValue(elements: any[], parameter: string, sldVersion: SldVersion): any {\n  if (!elements) {\n    return undefined;\n  }\n  const paramKey = sldVersion === '1.0.0' ? 'CssParameter' : 'SvgParameter';\n  const element = elements\n    .filter(obj => Object.keys(obj)?.includes(paramKey))\n    .find(obj => obj?.[':@']?.['@_name'] === parameter);\n\n  // we expected a value but received an array so we check if we have a function\n  if (element?.[paramKey]?.[0]?.Function) {\n    return sldFunctionToGeoStylerFunction(element?.[paramKey]);\n  }\n  // … or a Literal\n  if (element?.[paramKey]?.[0]?.Literal) {\n    return element?.[paramKey]?.[0]?.Literal?.[0]?.['#text'];\n  }\n\n  return element?.[paramKey]?.[0]?.['#text'];\n}\n\n/**\n * Get the attribute value of an object.\n *\n * @param obj The object to check.\n * @param name The name of the attribute\n * @returns The value of the requested parameter (if available)\n */\nexport function getAttribute(obj: any, name: string): any | undefined {\n  return obj?.[':@']?.[`@_${name}`];\n}\n\n/**\n * Determine if a fast-xml-parser object is a symbolizer representation.\n *\n * @param obj The object to check.\n * @returns Whether the passed object is a symbolizer representation or not.\n */\nexport function isSymbolizer(obj: any): boolean {\n  return Object.keys(obj).some(key => key.endsWith('Symbolizer'));\n}\n\n/**\n * Generic get function which tries to get the nested value of the given object or array.\n * It contains some SLD specific handling and tries to be smart but keep the syntax easy.\n * It always takes the first child of an array if no index was specified in the path argument.\n * e.g.\n *   Get text value: get(sldSymbolizer, 'Graphic.Mark.WellKnownName.#text')\n *   Get an attribute value: get(sldSymbolizer, 'Graphic.ExternalGraphic.OnlineResource.@xlink:href')\n *   Get an Css-/SvgParameter value: get(sldSymbolizer, 'Graphic.Mark.Fill.$fill-opacity', '1.1.0')\n *   Use with an index: get(sldObject, 'StyledLayerDescriptor.NamedLayer[1].UserStyle.Title.#text')\n *\n * @param obj A part of the parser result of the fast-xml-parser.\n * @param path The path to get the value from.\n * @param sldVersion The SLD version to use.\n * @returns\n */\nexport function get(obj: any, path: string, sldVersion?: SldVersion): any | undefined {\n  const parts = path.split(/\\.(.*)/s);\n  let key = parts[0];\n  const rest = parts[1];\n  let target = obj;\n  let index = 0;\n  // handle queries for attributes\n  if (rest?.startsWith('@')) {\n    target = getChildren(obj, key)[index];\n    return getAttribute(target, rest.substring(1));\n  }\n  if (Array.isArray(obj)) {\n    // we expected a value\n    if (key === '#text') {\n      // … so we check if we have a function\n      if (target[0]?.Function) {\n        return sldFunctionToGeoStylerFunction(target);\n      }\n      // … or a Literal\n      if (target[0]?.Literal) {\n        return target[0]?.Literal?.[0]?.['#text'];\n      }\n    }\n    // we expected a value but received an array so we check if we have a function\n    if (key === '#text' && target[0]?.Function) {\n      return sldFunctionToGeoStylerFunction(target);\n    }\n    // handle queries for CssParameter/SvgParameter\n    if (key.startsWith('$') && sldVersion) {\n      return getParameterValue(target, key.substring(1), sldVersion);\n    }\n    // handle queries with specified indexes\n    if(key.endsWith(']')) {\n      index = Number(key.split('[')[1].split(']')[0]);\n      key = key.split('[')[0];\n    }\n    target = getChildren(obj, key)[index];\n  }\n  if (!target) {\n    return undefined;\n  }\n  if (rest) {\n    return get(target[key], rest, sldVersion);\n  }\n  return target[key];\n}\n\n/**\n * Returns the keys of an object where the value is equal to the passed in\n * value.\n *\n * @param object The object to get the key from.\n * @param value The value to get the matching key from.\n * @return The matching keys.\n */\nexport function keysByValue(object: any, value: any): string[] {\n  return Object.keys(object).filter(key => object[key] === value);\n}\n"]}