import { StyleParser, Style, Rule, Symbolizer, PointSymbolizer, MarkSymbolizer, Filter, ScaleDenominator, LineSymbolizer, FillSymbolizer, RasterSymbolizer, IconSymbolizer, TextSymbolizer, ColorMap, ReadStyleResult, UnsupportedProperties, WriteStyleResult } from 'geostyler-style';
import { MapfileClass, MapfileStyle, MapfileLabel, MapfileLayer } from './mapfile2js/mapfileTypes';
/**
 * The Result of the readMultiStyle function.
 */
export declare type ReadStyleMultiResult = {
    warnings?: string[];
    unsupportedProperties?: UnsupportedProperties;
    /**
     * The geostyler-style array as read by the parser.
     */
    output?: Style[];
    errors?: Error[];
};
export declare type ConstructorParams = Record<string, unknown>;
/**
 * This parser can be used with the GeoStyler.
 * It implements the GeoStyler-Style StyleParser interface.
 *
 * @class MapfileStyleParser
 * @implements StyleParser
 */
export declare class MapfileStyleParser implements StyleParser {
    /**
     * The name of the Mapfile Style Parser.
     */
    static title: string;
    title: string;
    symbolsPath: string;
    constructor(opts?: ConstructorParams);
    /**
     * Get the name for the Style from the Mapfile LAYER. Returns the GROUP value of the LAYER
     * if defined or the NAME value of the LAYER if defined or an empty string.
     *
     * @param {MapfileLayer} mapfileLayer The Mapfile Layer object representation (created with mapfile2js)
     * @return {string} The name to be used for the GeoStyler Style Style
     */
    getStyleNameFromMapfileLayer(mapfileLayer: MapfileLayer): string;
    /**
     * Get the GeoStyler-Style Filter from an Mapfile EXPRESSION and CLASSITEM.
     *
     * @param {MapfileClass} mapfileClass The Mapfile Class
     * @param {string} mapfileClassItem The Mapfile Class
     * @return {Filter} The GeoStyler-Style Filter
     */
    getFilterFromClassItem(mapfileClass: MapfileClass, mapfileClassItem: string): Filter | null;
    /**
     * Get the GeoStyler-Style Filter from an Mapfile EXPRESSION.
     *
     * @param {string} attribute The Mapfile Expression Attribute
     * @param {string} operator The Mapfile Expression Operator
     * @param {string} value The Mapfile Expression Value
     * @return {Filter} The GeoStyler-Style Filter
     */
    getFilterFromAttributeValueComparison(attribute: string, operator: string, value: string): Filter | null;
    /**
     * Get the GeoStyler-Style Filter from an Mapfile EXPRESSION.
     *
     * @param {string} mapfileExpression The Mapfile Expression
     * @return {Filter} The GeoStyler-Style Filter
     */
    getFilterFromMapfileExpression(mapfileExpression: string): Filter | null;
    /**
     * Get the GeoStyler-Style Filter from a Mapfile CLASS.
     *
     * @param {MapfileClass} mapfileClass The Mapfile Class
     * @return {Filter} The GeoStyler-Style Filter
     */
    getFilterFromMapfileClass(mapfileClass: MapfileClass, mapfileLayerClassItem: string): Filter | null;
    /**
     * Get the GeoStyler-Style ScaleDenominator from an Mapfile element (layer, class or style).
     * Returns null if there is no defined ScaleDenominator in the element.
     * @param {MapfileLayer | MapfileClass | MapfileStyle} mapfileElement The Mapfile layer, class or style.
     * @return {ScaleDenominator} The GeoStyler-Style ScaleDenominator or null.
     */
    getScaleDenominator(mapfileElement: MapfileLayer | MapfileClass | MapfileStyle): ScaleDenominator | null;
    /**
     * Update the given scaleDenominator with the scaleDenominator from the given mapfileElement;
     *
     * @param {MapfileLayer | MapfileClass | MapfileStyle} mapfileElement The Mapfile layer, class or style.
     * @param {ScaleDenominator} scaleDenominator The scaleDenominator to try to override.
     * @return {scaleDenominator} A ScaleDenominator value or null.
     */
    updateScaleDenominator(mapfileElement: MapfileLayer | MapfileClass | MapfileStyle, scaleDenominator: ScaleDenominator | null): ScaleDenominator | null;
    /**
     * Get the GeoStyler-Style MarkSymbolizer from an Mapfile STYLE
     *
     * @param {MapfileStyle} mapfileStyle The Mapfile Style Parameters
     * @return {MarkSymbolizer} The GeoStyler-Style MarkSymbolizer
     */
    getMarkSymbolizerFromMapfileStyle(mapfileStyle: MapfileStyle): MarkSymbolizer;
    /**
     * Get the GeoStyler-Style IconSymbolizer from an Mapfile Style
     *
     * @param {MapfileStyle} mapfileStyle The Mapfile Style
     * @return {IconSymbolizer} The GeoStyler-Style IconSymbolizer
     */
    getIconSymbolizerFromMapfileStyle(mapfileStyle: MapfileStyle): IconSymbolizer;
    /**
     * Get the GeoStyler-Style TextSymbolizer from an Mapfile LABEL.
     *
     * @param {MapfileLabel} labelParameters The Mapfile Label Parameters
     * @return {TextSymbolizer} The GeoStyler-Style TextSymbolizer
     */
    getTextSymbolizerFromMapfileStyle(labelParameters: MapfileLabel): TextSymbolizer;
    /**
     * Get the GeoStyler-Style PointSymbolizer from an Mapfile STYLE.
     *
     * @param {MapfileStyle} mapfileStyle The Mapfile Style Parameters
     * @return {PointSymbolizer} The GeoStyler-Style PointSymbolizer
     */
    getPointSymbolizerFromMapfileStyle(mapfileStyle: MapfileStyle): PointSymbolizer;
    /**
     * Get the GeoStyler-Style LineSymbolizer from an Mapfile STYLE.
     *
     * @param {MapfileStyle} mapfileStyle The Mapfile Style Parameters
     * @return {LineSymbolizer} The GeoStyler-Style LineSymbolizer
     */
    getLineSymbolizerFromMapfileStyle(mapfileStyle: MapfileStyle): LineSymbolizer;
    /**
     * Get the GeoStyler-Style FillSymbolizer from an Mapfile STYLE.
     *
     * PolygonSymbolizer Stroke is just partially supported.
     *
     * @param {MapfileStyle} mapfileStyle The Mapfile Style Parameters
     * @return {FillSymbolizer} The GeoStyler-Style FillSymbolizer
     */
    getFillSymbolizerFromMapfileStyle(mapfileStyle: MapfileStyle): FillSymbolizer;
    /**
     * Get the GeoStyler-Style ColorMap from an Mapfile LAYER.
     *
     * @param {MapfileLayer} mapfileLayer The Mapfile Layer object
     * @return {ColorMap} The GeoStyler-Style ColorMap
     */
    getColorMapFromMapfileLayer(mapfileLayer: MapfileLayer): ColorMap | undefined;
    /**
     * Get the GeoStyler-Style RasterSymbolizer from an Mapfile LAYER.
     *
     * @param {MapfileLayer} mapfileLayer The Mapfile Layer object
     * @return {RasterSymbolizer} The GeoStyler-Style RasterSymbolizer
     */
    getRasterSymbolizersFromMapfileLayer(mapfileLayer: MapfileLayer): RasterSymbolizer;
    /**
     * Get the GeoStyler-Style Basic Symbolizer Parameter from an Mapfile STYLE.
     *
     * @param {MapfileStyle | MapfileLabel} styleParameters The Mapfile Style
     * @return {Symbolizer} The GeoStyler-Style Symbolizer Parameters
     */
    getBaseSymbolizerFromMapfileStyle(styleParameters: MapfileStyle | MapfileLabel): Symbolizer;
    /**
     * Get the GeoStyler-Style Symbolizers from an Mapfile CLASS.
     *
     * @param {MapfileClass} mapfileClass The Mapfile Class
     * @param {string} mapfileLayerType The Mapfile Layer Type
     * @param {string} mapfileLayerLabelItem The Mapfile Layer Label Item
     * @return {Symbolizer[]} The GeoStyler-Style Symbolizer Array
     */
    getSymbolizersFromClass(mapfileClass: MapfileClass, mapfileLayerType: string, mapfileLayerLabelItem: string): Symbolizer[];
    /**
     * Collect icon data if defined within the label tag
     *
     * @param {MapfileLabel} mapfileLabel Mapfile label data
     * @return {IconSymbolizer[]} The IconSymbolizer
     */
    getIconsFromMapfileLabel(mapfileLabel: MapfileLabel): IconSymbolizer[];
    /**
     * Get the GeoStyler-Style Rule from an Mapfile Object.
     *
     * @param {MapfileLayer} mapfileLayer The Mapfile LAYER representation
     * @return {Rule} The GeoStyler-Style Rule
     */
    getRulesFromMapfileLayer(mapfileLayer: MapfileLayer): Rule[];
    /**
     * Get the GeoStyler-Style Style from an Mapfile Object.
     *
     * @param {MapfileLayer} mapfileLayer The Mapfile layer object representation
     * @return {Style} The GeoStyler-Style Style
     */
    mapfileLayerToGeoStylerStyle(mapfileLayer: MapfileLayer): Style;
    /**
     * The readStyle implementation of the GeoStyler-Style StyleParser interface.
     * It reads one mapfile LAYER as a string and returns a Promise.
     * If there are multiple LAYER, only the first will be read and returned.
     * The Promise itself resolves containing a GeoStyler-Style Style.
     *
     * @param  {string} mapfileString A Mapfile as a string.
     * @return {Promise} The Promise resolving containing the GeoStyler-Style Style.
     */
    readStyle(mapfileString: string): Promise<ReadStyleResult>;
    /**
     * Same as readStyle but read mutliple LAYER in a mapfile.
     *
     * @param  {string} mapfileString A Mapfile as a string.
     * @return {Promise} The Promise resolves containing an array of GeoStyler-Style Style.
     */
    readMultiStyles(mapfileString: string): Promise<ReadStyleMultiResult>;
    /**
     * The writeStyle implementation of the GeoStyler-Style StyleParser interface.
     * It reads a GeoStyler-Style Style and returns a Promise.
     * The Promise itself resolves with a Mapfile string.
     *
     * @param {Style} geoStylerStyle A GeoStyler-Style Style.
     * @return {Promise} The Promise resolving with the Mapfile as a string.
     */
    writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<string>>;
    /**
     * Splits up a Mapfile Expression into its two top level Expressions
     *
     * @param {string} mapfileExpression A Mapfile Expression.
     * @return {Array<string>} The two top level expressions.
     */
    private splitNestedExpression;
    /**
     * Generic error message for not supported rules.
     * @param {string} notSupported The not supported avoided element. Printed in the warning message.
     * @param {string} mapfileParentElement The mapfile parent element name. Printed in the warning message.
     * @param {any} mapfileElement the value to test if it existing.
     */
    private checkWarnDropRule;
}
export default MapfileStyleParser;
